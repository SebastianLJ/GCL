// Implementation file for parser generated by fsyacc
module CalculatorParser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 2 "CalculatorParser.fsp"

open CalculatorTypesAST

# 10 "CalculatorParser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | WHITESPACE
  | AND
  | OR
  | ANDH
  | ORH
  | NOT
  | EQUAL
  | NEQUAL
  | GT
  | GTE
  | LT
  | LTE
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | POW
  | LPAR
  | RPAR
  | LBRACK
  | RBRACK
  | ARRAY
  | VAR
  | FUNC
  | CONC
  | ASSIGN
  | SEPARATOR
  | IF
  | FI
  | DO
  | OD
  | GC
  | C
  | BOOLEAN of (bool)
  | X of (String)
  | NUM of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_WHITESPACE
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_ANDH
    | TOKEN_ORH
    | TOKEN_NOT
    | TOKEN_EQUAL
    | TOKEN_NEQUAL
    | TOKEN_GT
    | TOKEN_GTE
    | TOKEN_LT
    | TOKEN_LTE
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_TIMES
    | TOKEN_DIV
    | TOKEN_POW
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_LBRACK
    | TOKEN_RBRACK
    | TOKEN_ARRAY
    | TOKEN_VAR
    | TOKEN_FUNC
    | TOKEN_CONC
    | TOKEN_ASSIGN
    | TOKEN_SEPARATOR
    | TOKEN_IF
    | TOKEN_FI
    | TOKEN_DO
    | TOKEN_OD
    | TOKEN_GC
    | TOKEN_C
    | TOKEN_BOOLEAN
    | TOKEN_X
    | TOKEN_NUM
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_cExpr
    | NONTERM_gcExpr
    | NONTERM_aExpr
    | NONTERM_bExpr

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | WHITESPACE  -> 1 
  | AND  -> 2 
  | OR  -> 3 
  | ANDH  -> 4 
  | ORH  -> 5 
  | NOT  -> 6 
  | EQUAL  -> 7 
  | NEQUAL  -> 8 
  | GT  -> 9 
  | GTE  -> 10 
  | LT  -> 11 
  | LTE  -> 12 
  | PLUS  -> 13 
  | MINUS  -> 14 
  | TIMES  -> 15 
  | DIV  -> 16 
  | POW  -> 17 
  | LPAR  -> 18 
  | RPAR  -> 19 
  | LBRACK  -> 20 
  | RBRACK  -> 21 
  | ARRAY  -> 22 
  | VAR  -> 23 
  | FUNC  -> 24 
  | CONC  -> 25 
  | ASSIGN  -> 26 
  | SEPARATOR  -> 27 
  | IF  -> 28 
  | FI  -> 29 
  | DO  -> 30 
  | OD  -> 31 
  | GC  -> 32 
  | C  -> 33 
  | BOOLEAN _ -> 34 
  | X _ -> 35 
  | NUM _ -> 36 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_WHITESPACE 
  | 2 -> TOKEN_AND 
  | 3 -> TOKEN_OR 
  | 4 -> TOKEN_ANDH 
  | 5 -> TOKEN_ORH 
  | 6 -> TOKEN_NOT 
  | 7 -> TOKEN_EQUAL 
  | 8 -> TOKEN_NEQUAL 
  | 9 -> TOKEN_GT 
  | 10 -> TOKEN_GTE 
  | 11 -> TOKEN_LT 
  | 12 -> TOKEN_LTE 
  | 13 -> TOKEN_PLUS 
  | 14 -> TOKEN_MINUS 
  | 15 -> TOKEN_TIMES 
  | 16 -> TOKEN_DIV 
  | 17 -> TOKEN_POW 
  | 18 -> TOKEN_LPAR 
  | 19 -> TOKEN_RPAR 
  | 20 -> TOKEN_LBRACK 
  | 21 -> TOKEN_RBRACK 
  | 22 -> TOKEN_ARRAY 
  | 23 -> TOKEN_VAR 
  | 24 -> TOKEN_FUNC 
  | 25 -> TOKEN_CONC 
  | 26 -> TOKEN_ASSIGN 
  | 27 -> TOKEN_SEPARATOR 
  | 28 -> TOKEN_IF 
  | 29 -> TOKEN_FI 
  | 30 -> TOKEN_DO 
  | 31 -> TOKEN_OD 
  | 32 -> TOKEN_GC 
  | 33 -> TOKEN_C 
  | 34 -> TOKEN_BOOLEAN 
  | 35 -> TOKEN_X 
  | 36 -> TOKEN_NUM 
  | 39 -> TOKEN_end_of_input
  | 37 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_cExpr 
    | 3 -> NONTERM_cExpr 
    | 4 -> NONTERM_cExpr 
    | 5 -> NONTERM_cExpr 
    | 6 -> NONTERM_cExpr 
    | 7 -> NONTERM_gcExpr 
    | 8 -> NONTERM_gcExpr 
    | 9 -> NONTERM_aExpr 
    | 10 -> NONTERM_aExpr 
    | 11 -> NONTERM_aExpr 
    | 12 -> NONTERM_aExpr 
    | 13 -> NONTERM_aExpr 
    | 14 -> NONTERM_aExpr 
    | 15 -> NONTERM_aExpr 
    | 16 -> NONTERM_aExpr 
    | 17 -> NONTERM_aExpr 
    | 18 -> NONTERM_bExpr 
    | 19 -> NONTERM_bExpr 
    | 20 -> NONTERM_bExpr 
    | 21 -> NONTERM_bExpr 
    | 22 -> NONTERM_bExpr 
    | 23 -> NONTERM_bExpr 
    | 24 -> NONTERM_bExpr 
    | 25 -> NONTERM_bExpr 
    | 26 -> NONTERM_bExpr 
    | 27 -> NONTERM_bExpr 
    | 28 -> NONTERM_bExpr 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 39 
let _fsyacc_tagOfErrorTerminal = 37

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | WHITESPACE  -> "WHITESPACE" 
  | AND  -> "AND" 
  | OR  -> "OR" 
  | ANDH  -> "ANDH" 
  | ORH  -> "ORH" 
  | NOT  -> "NOT" 
  | EQUAL  -> "EQUAL" 
  | NEQUAL  -> "NEQUAL" 
  | GT  -> "GT" 
  | GTE  -> "GTE" 
  | LT  -> "LT" 
  | LTE  -> "LTE" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | TIMES  -> "TIMES" 
  | DIV  -> "DIV" 
  | POW  -> "POW" 
  | LPAR  -> "LPAR" 
  | RPAR  -> "RPAR" 
  | LBRACK  -> "LBRACK" 
  | RBRACK  -> "RBRACK" 
  | ARRAY  -> "ARRAY" 
  | VAR  -> "VAR" 
  | FUNC  -> "FUNC" 
  | CONC  -> "CONC" 
  | ASSIGN  -> "ASSIGN" 
  | SEPARATOR  -> "SEPARATOR" 
  | IF  -> "IF" 
  | FI  -> "FI" 
  | DO  -> "DO" 
  | OD  -> "OD" 
  | GC  -> "GC" 
  | C  -> "C" 
  | BOOLEAN _ -> "BOOLEAN" 
  | X _ -> "X" 
  | NUM _ -> "NUM" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | WHITESPACE  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | ANDH  -> (null : System.Object) 
  | ORH  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | EQUAL  -> (null : System.Object) 
  | NEQUAL  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | GTE  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | LTE  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | POW  -> (null : System.Object) 
  | LPAR  -> (null : System.Object) 
  | RPAR  -> (null : System.Object) 
  | LBRACK  -> (null : System.Object) 
  | RBRACK  -> (null : System.Object) 
  | ARRAY  -> (null : System.Object) 
  | VAR  -> (null : System.Object) 
  | FUNC  -> (null : System.Object) 
  | CONC  -> (null : System.Object) 
  | ASSIGN  -> (null : System.Object) 
  | SEPARATOR  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | FI  -> (null : System.Object) 
  | DO  -> (null : System.Object) 
  | OD  -> (null : System.Object) 
  | GC  -> (null : System.Object) 
  | C  -> (null : System.Object) 
  | BOOLEAN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | X _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NUM _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 3us; 65535us; 0us; 2us; 15us; 13us; 27us; 14us; 2us; 65535us; 17us; 18us; 22us; 23us; 10us; 65535us; 5us; 6us; 8us; 9us; 11us; 12us; 38us; 31us; 39us; 32us; 40us; 33us; 41us; 34us; 42us; 35us; 43us; 36us; 46us; 37us; 13us; 65535us; 17us; 26us; 22us; 26us; 59us; 48us; 60us; 49us; 61us; 50us; 62us; 51us; 63us; 52us; 64us; 53us; 65us; 54us; 66us; 55us; 67us; 56us; 68us; 57us; 69us; 58us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 7us; 10us; 21us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 2us; 1us; 4us; 1us; 1us; 1us; 2us; 1us; 2us; 6us; 2us; 9us; 10us; 11us; 12us; 13us; 1us; 3us; 1us; 3us; 6us; 3us; 9us; 10us; 11us; 12us; 13us; 1us; 3us; 1us; 3us; 6us; 3us; 9us; 10us; 11us; 12us; 13us; 2us; 4us; 4us; 2us; 4us; 7us; 1us; 4us; 1us; 5us; 1us; 5us; 1us; 5us; 1us; 5us; 1us; 5us; 1us; 6us; 1us; 6us; 1us; 6us; 1us; 6us; 1us; 6us; 11us; 7us; 18us; 19us; 20us; 21us; 23us; 24us; 25us; 26us; 27us; 28us; 1us; 7us; 1us; 8us; 1us; 8us; 1us; 8us; 6us; 9us; 9us; 10us; 11us; 12us; 13us; 6us; 9us; 10us; 10us; 11us; 12us; 13us; 6us; 9us; 10us; 11us; 11us; 12us; 13us; 6us; 9us; 10us; 11us; 12us; 12us; 13us; 6us; 9us; 10us; 11us; 12us; 13us; 13us; 6us; 9us; 10us; 11us; 12us; 13us; 14us; 6us; 9us; 10us; 11us; 12us; 13us; 17us; 1us; 9us; 1us; 10us; 1us; 11us; 1us; 12us; 1us; 13us; 1us; 14us; 1us; 15us; 1us; 16us; 1us; 17us; 1us; 17us; 11us; 18us; 18us; 19us; 20us; 21us; 23us; 24us; 25us; 26us; 27us; 28us; 11us; 18us; 19us; 19us; 20us; 21us; 23us; 24us; 25us; 26us; 27us; 28us; 11us; 18us; 19us; 20us; 20us; 21us; 23us; 24us; 25us; 26us; 27us; 28us; 11us; 18us; 19us; 20us; 21us; 21us; 23us; 24us; 25us; 26us; 27us; 28us; 11us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 11us; 18us; 19us; 20us; 21us; 23us; 23us; 24us; 25us; 26us; 27us; 28us; 11us; 18us; 19us; 20us; 21us; 23us; 24us; 24us; 25us; 26us; 27us; 28us; 11us; 18us; 19us; 20us; 21us; 23us; 24us; 25us; 25us; 26us; 27us; 28us; 11us; 18us; 19us; 20us; 21us; 23us; 24us; 25us; 26us; 26us; 27us; 28us; 11us; 18us; 19us; 20us; 21us; 23us; 24us; 25us; 26us; 27us; 27us; 28us; 11us; 18us; 19us; 20us; 21us; 23us; 24us; 25us; 26us; 27us; 28us; 28us; 1us; 18us; 1us; 19us; 1us; 20us; 1us; 21us; 1us; 22us; 1us; 23us; 1us; 24us; 1us; 25us; 1us; 26us; 1us; 27us; 1us; 28us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 7us; 9us; 11us; 13us; 20us; 22us; 24us; 31us; 33us; 35us; 42us; 45us; 48us; 50us; 52us; 54us; 56us; 58us; 60us; 62us; 64us; 66us; 68us; 70us; 82us; 84us; 86us; 88us; 90us; 97us; 104us; 111us; 118us; 125us; 132us; 139us; 141us; 143us; 145us; 147us; 149us; 151us; 153us; 155us; 157us; 159us; 171us; 183us; 195us; 207us; 219us; 231us; 243us; 255us; 267us; 279us; 291us; 293us; 295us; 297us; 299us; 301us; 303us; 305us; 307us; 309us; 311us; |]
let _fsyacc_action_rows = 70
let _fsyacc_actionTableElements = [|4us; 32768us; 22us; 7us; 28us; 16us; 30us; 21us; 35us; 4us; 0us; 49152us; 2us; 32768us; 0us; 3us; 27us; 15us; 0us; 16385us; 1us; 32768us; 26us; 5us; 4us; 32768us; 14us; 43us; 18us; 46us; 23us; 45us; 36us; 44us; 5us; 16386us; 13us; 38us; 14us; 39us; 15us; 40us; 16us; 41us; 17us; 42us; 1us; 32768us; 20us; 8us; 4us; 32768us; 14us; 43us; 18us; 46us; 23us; 45us; 36us; 44us; 6us; 32768us; 13us; 38us; 14us; 39us; 15us; 40us; 16us; 41us; 17us; 42us; 21us; 10us; 1us; 32768us; 26us; 11us; 4us; 32768us; 14us; 43us; 18us; 46us; 23us; 45us; 36us; 44us; 5us; 16387us; 13us; 38us; 14us; 39us; 15us; 40us; 16us; 41us; 17us; 42us; 1us; 16388us; 27us; 15us; 1us; 16391us; 27us; 15us; 4us; 32768us; 22us; 7us; 28us; 16us; 30us; 21us; 35us; 4us; 1us; 32768us; 1us; 17us; 2us; 32768us; 6us; 63us; 32us; 28us; 1us; 32768us; 1us; 19us; 1us; 32768us; 29us; 20us; 0us; 16389us; 1us; 32768us; 1us; 22us; 2us; 32768us; 6us; 63us; 32us; 28us; 1us; 32768us; 1us; 24us; 1us; 32768us; 31us; 25us; 0us; 16390us; 11us; 32768us; 2us; 59us; 3us; 60us; 4us; 61us; 5us; 62us; 7us; 64us; 8us; 65us; 9us; 66us; 10us; 67us; 11us; 68us; 12us; 69us; 24us; 27us; 4us; 32768us; 22us; 7us; 28us; 16us; 30us; 21us; 35us; 4us; 1us; 32768us; 25us; 29us; 1us; 32768us; 32us; 30us; 0us; 16392us; 0us; 16393us; 0us; 16394us; 2us; 16395us; 13us; 38us; 14us; 39us; 2us; 16396us; 13us; 38us; 14us; 39us; 5us; 16397us; 13us; 38us; 14us; 39us; 15us; 40us; 16us; 41us; 17us; 42us; 0us; 16398us; 6us; 32768us; 13us; 38us; 14us; 39us; 15us; 40us; 16us; 41us; 17us; 42us; 19us; 47us; 4us; 32768us; 14us; 43us; 18us; 46us; 23us; 45us; 36us; 44us; 4us; 32768us; 14us; 43us; 18us; 46us; 23us; 45us; 36us; 44us; 4us; 32768us; 14us; 43us; 18us; 46us; 23us; 45us; 36us; 44us; 4us; 32768us; 14us; 43us; 18us; 46us; 23us; 45us; 36us; 44us; 4us; 32768us; 14us; 43us; 18us; 46us; 23us; 45us; 36us; 44us; 4us; 32768us; 14us; 43us; 18us; 46us; 23us; 45us; 36us; 44us; 0us; 16399us; 0us; 16400us; 4us; 32768us; 14us; 43us; 18us; 46us; 23us; 45us; 36us; 44us; 0us; 16401us; 8us; 16402us; 3us; 60us; 5us; 62us; 7us; 64us; 8us; 65us; 9us; 66us; 10us; 67us; 11us; 68us; 12us; 69us; 6us; 16403us; 7us; 64us; 8us; 65us; 9us; 66us; 10us; 67us; 11us; 68us; 12us; 69us; 8us; 16404us; 3us; 60us; 5us; 62us; 7us; 64us; 8us; 65us; 9us; 66us; 10us; 67us; 11us; 68us; 12us; 69us; 6us; 16405us; 7us; 64us; 8us; 65us; 9us; 66us; 10us; 67us; 11us; 68us; 12us; 69us; 10us; 16406us; 2us; 59us; 3us; 60us; 4us; 61us; 5us; 62us; 7us; 64us; 8us; 65us; 9us; 66us; 10us; 67us; 11us; 68us; 12us; 69us; 10us; 16407us; 2us; 59us; 3us; 60us; 4us; 61us; 5us; 62us; 7us; 64us; 8us; 65us; 9us; 66us; 10us; 67us; 11us; 68us; 12us; 69us; 10us; 16408us; 2us; 59us; 3us; 60us; 4us; 61us; 5us; 62us; 7us; 64us; 8us; 65us; 9us; 66us; 10us; 67us; 11us; 68us; 12us; 69us; 10us; 16409us; 2us; 59us; 3us; 60us; 4us; 61us; 5us; 62us; 7us; 64us; 8us; 65us; 9us; 66us; 10us; 67us; 11us; 68us; 12us; 69us; 10us; 16410us; 2us; 59us; 3us; 60us; 4us; 61us; 5us; 62us; 7us; 64us; 8us; 65us; 9us; 66us; 10us; 67us; 11us; 68us; 12us; 69us; 10us; 16411us; 2us; 59us; 3us; 60us; 4us; 61us; 5us; 62us; 7us; 64us; 8us; 65us; 9us; 66us; 10us; 67us; 11us; 68us; 12us; 69us; 10us; 16412us; 2us; 59us; 3us; 60us; 4us; 61us; 5us; 62us; 7us; 64us; 8us; 65us; 9us; 66us; 10us; 67us; 11us; 68us; 12us; 69us; 1us; 32768us; 6us; 63us; 1us; 32768us; 6us; 63us; 1us; 32768us; 6us; 63us; 1us; 32768us; 6us; 63us; 1us; 32768us; 6us; 63us; 1us; 32768us; 6us; 63us; 1us; 32768us; 6us; 63us; 1us; 32768us; 6us; 63us; 1us; 32768us; 6us; 63us; 1us; 32768us; 6us; 63us; 1us; 32768us; 6us; 63us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 5us; 6us; 9us; 10us; 12us; 17us; 23us; 25us; 30us; 37us; 39us; 44us; 50us; 52us; 54us; 59us; 61us; 64us; 66us; 68us; 69us; 71us; 74us; 76us; 78us; 79us; 91us; 96us; 98us; 100us; 101us; 102us; 103us; 106us; 109us; 115us; 116us; 123us; 128us; 133us; 138us; 143us; 148us; 153us; 154us; 155us; 160us; 161us; 170us; 177us; 186us; 193us; 204us; 215us; 226us; 237us; 248us; 259us; 270us; 272us; 274us; 276us; 278us; 280us; 282us; 284us; 286us; 288us; 290us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 3us; 6us; 3us; 5us; 5us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 2us; 1us; 1us; 3us; 3us; 3us; 3us; 3us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 2us; 2us; 2us; 3us; 3us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; 5us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16389us; 65535us; 65535us; 65535us; 65535us; 16390us; 65535us; 65535us; 65535us; 65535us; 16392us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16399us; 16400us; 65535us; 16401us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; |]
let _fsyacc_reductions ()  =    [| 
# 314 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : C)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 323 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : C)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 "CalculatorParser.fsp"
                                                    _1 
                   )
# 45 "CalculatorParser.fsp"
                 : C));
# 334 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : String)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : a)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 56 "CalculatorParser.fsp"
                                                                  AssignExpr(_3) 
                   )
# 56 "CalculatorParser.fsp"
                 : C));
# 346 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : a)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : a)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "CalculatorParser.fsp"
                                                                  AssignArrExpr(_1, _3, _6) 
                   )
# 57 "CalculatorParser.fsp"
                 : C));
# 358 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : C)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : C)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "CalculatorParser.fsp"
                                                                  SeparatorExpr(_1, _3) 
                   )
# 58 "CalculatorParser.fsp"
                 : C));
# 370 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : GC)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "CalculatorParser.fsp"
                                                                  IfExpr(_3) 
                   )
# 59 "CalculatorParser.fsp"
                 : C));
# 381 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : GC)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 60 "CalculatorParser.fsp"
                                                                  DoExpr(_3) 
                   )
# 60 "CalculatorParser.fsp"
                 : C));
# 392 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : b)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : C)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "CalculatorParser.fsp"
                                               FuncExpr(_1, _3) 
                   )
# 63 "CalculatorParser.fsp"
                 : GC));
# 404 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "CalculatorParser.fsp"
                                               ConcExpr(_1, _3) 
                   )
# 64 "CalculatorParser.fsp"
                 : GC));
# 414 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : a)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : a)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "CalculatorParser.fsp"
                                               PlusExpr(_1,_3) 
                   )
# 67 "CalculatorParser.fsp"
                 : a));
# 426 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : a)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : a)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 68 "CalculatorParser.fsp"
                                               MinusExpr(_1,_3) 
                   )
# 68 "CalculatorParser.fsp"
                 : a));
# 438 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : a)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : a)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "CalculatorParser.fsp"
                                               TimesExpr(_1,_3) 
                   )
# 69 "CalculatorParser.fsp"
                 : a));
# 450 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : a)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : a)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "CalculatorParser.fsp"
                                               DivExpr(_1,_3) 
                   )
# 70 "CalculatorParser.fsp"
                 : a));
# 462 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : a)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : a)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "CalculatorParser.fsp"
                                               PowExpr(_1,_3) 
                   )
# 71 "CalculatorParser.fsp"
                 : a));
# 474 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : a)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "CalculatorParser.fsp"
                                               UMinusExpr(_2) 
                   )
# 72 "CalculatorParser.fsp"
                 : a));
# 485 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 73 "CalculatorParser.fsp"
                                               Num(_1) 
                   )
# 73 "CalculatorParser.fsp"
                 : a));
# 496 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "CalculatorParser.fsp"
                                               Var(_1) 
                   )
# 74 "CalculatorParser.fsp"
                 : a));
# 506 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : a)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "CalculatorParser.fsp"
                                               _2 
                   )
# 75 "CalculatorParser.fsp"
                 : a));
# 517 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : b)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : b)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "CalculatorParser.fsp"
                                               AndExpr(_1, _3) 
                   )
# 78 "CalculatorParser.fsp"
                 : b));
# 529 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : b)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : b)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 79 "CalculatorParser.fsp"
                                               OrExpr(_1, _3) 
                   )
# 79 "CalculatorParser.fsp"
                 : b));
# 541 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : b)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : b)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 80 "CalculatorParser.fsp"
                                               AndHardExpr(_1, _3) 
                   )
# 80 "CalculatorParser.fsp"
                 : b));
# 553 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : b)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : b)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "CalculatorParser.fsp"
                                               OrHardExpr(_1, _3) 
                   )
# 81 "CalculatorParser.fsp"
                 : b));
# 565 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : b)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "CalculatorParser.fsp"
                                               NotExpr(_2) 
                   )
# 82 "CalculatorParser.fsp"
                 : b));
# 576 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : b)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : b)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "CalculatorParser.fsp"
                                               EqualExpr(_1, _3) 
                   )
# 83 "CalculatorParser.fsp"
                 : b));
# 588 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : b)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : b)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 84 "CalculatorParser.fsp"
                                               NEqualExpr(_1, _3) 
                   )
# 84 "CalculatorParser.fsp"
                 : b));
# 600 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : b)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : b)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 85 "CalculatorParser.fsp"
                                               GtExpr(_1, _3) 
                   )
# 85 "CalculatorParser.fsp"
                 : b));
# 612 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : b)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : b)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "CalculatorParser.fsp"
                                               GteExpr(_1, _3) 
                   )
# 86 "CalculatorParser.fsp"
                 : b));
# 624 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : b)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : b)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "CalculatorParser.fsp"
                                               LtExpr(_1, _3) 
                   )
# 87 "CalculatorParser.fsp"
                 : b));
# 636 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : b)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : b)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "CalculatorParser.fsp"
                                               LteExpr(_1, _3) 
                   )
# 88 "CalculatorParser.fsp"
                 : b));
|]
# 649 "CalculatorParser.fs"
let tables () : FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 40;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : C =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
