// Open the file that defines the type "expr" we shall use as AST
%{
open SecurityTypesAST
%}

// Declare the tokens (terminal symbols)
%token <string> VAR
%token <char> ARRAY
%token SEPARATOR
%token LtSEPARATOR
%token ASSIGN
%token EOF WHITESPACE
// NOTE: the actual formats of these tokens are defined in the lexer file
//       as regular expressions

// Specify precedence and associativity of operators
// Precedence is given by the order (from low to high)
%right SEPARATOR


// We declare the initial non-terminal symbol
%start start

// We specify the return type of each of then non-terminal symbols
%type <Choice> start
%type <Choice> init
%type <SecurityLattice> securityExp
%type <SecurityLattice> securityElem
%type <SecurityClassification> securityClassification

// Grammar productions
%%

// The first production in "formal" notation is
// start -> expression
// here written:
start: init EOF             { $1 }

// Note that we need to insert an End-Of-File (EOF)
// The code annotation { $1 } specifies that parsing with this production
// returns whatever parsing the expression returns: $1 is the result of parsing
// the first component of the production (i.e. expression)

// The productions for expressions are like in the grammar we saw in class
// written in the yacc format:

init:
    | securityExp                                                { SecurityLatInit($1) }
    | securityClassification                                     { SecurityClassInit($1) }

securityExp:
    | VAR LtSEPARATOR securityElem                              { MulLevel($1, $3) }
securityElem:
    | VAR LtSEPARATOR securityElem                              { MulLevel($1,$3) }
    | VAR                                                       { Level($1) }
securityClassification:
    | VAR ASSIGN VAR                                            { InitVar($1, $3) }
    | ARRAY ASSIGN VAR                                          { InitArr($1, $3) }
    | securityClassification SEPARATOR securityClassification   { InitSeq($1, $3) }
%%
